services:
  # Frontend - Next.js Application
  nextjs-app:
    build:
      context: .
      dockerfile: agent-frontend/Dockerfile
    container_name: khuongcuoicung-app
    ports:
      - "12000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      - NEXT_TELEMETRY_DISABLED=1
      - API_GATEWAY_URL=http://kong-gateway:8000
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      # OAuth Configuration
      - NEXT_PUBLIC_GOOGLE_CLIENT_ID=your-google-client-id-here
      - NEXT_PUBLIC_FACEBOOK_APP_ID=your-facebook-app-id-here
      - NEXTAUTH_URL=http://localhost:12000
      - NEXTAUTH_SECRET=your-nextauth-secret-here
    depends_on:
      kong-gateway:
        condition: service_healthy
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Kong Database (PostgreSQL)
  kong-database:
    image: postgres:15-alpine
    container_name: kong-database
    environment:
      - POSTGRES_USER=kong
      - POSTGRES_PASSWORD=kongpass
      - POSTGRES_DB=kong
    volumes:
      - kong-db-data:/var/lib/postgresql/data
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Kong Gateway (API Gateway)
  kong-gateway:
    build:
      context: ./kong-gateway
      dockerfile: Dockerfile
    container_name: kong-gateway
    ports:
      - "8080:8000"    # Proxy port (HTTP)
      - "8446:8443"    # Proxy port (HTTPS)
      - "8002:8001"    # Admin API port (HTTP)
      - "8445:8444"    # Admin API port (HTTPS)
      - "8100:8100"    # Status port
    environment:
      - KONG_DATABASE=off
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl
      - KONG_PROXY_LISTEN=0.0.0.0:8000, 0.0.0.0:8443 ssl
      - KONG_PLUGINS=bundled,jwt,cors,rate-limiting,file-log,prometheus,request-transformer,response-transformer
      - KONG_LOG_LEVEL=info
      - KONG_DECLARATIVE_CONFIG=/etc/kong/kong.yml
    depends_on:
      user-service:
        condition: service_healthy
      content-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      admin-service:
        condition: service_healthy
      botpress:
        condition: service_healthy
      agent-policy-service:
        condition: service_healthy
      agent-management-service:
        condition: service_healthy
    volumes:
      - ./kong-gateway/logs:/usr/local/kong/logs
      - ./kong-gateway/kong.yml:/etc/kong/kong.yml:ro
      - kong-tmp:/tmp
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: api-gateway-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
      - ./api-gateway/config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Microservices (7 services)
  user-service:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "3001:8001"
    environment:
      - DATABASE_URL=sqlite:///./authify.db
      - JWT_SECRET_KEY=super-secret-jwt-key-for-development-only-change-in-production
      - REDIS_URL=redis://redis:6379/0
      # OAuth Configuration
      - GOOGLE_CLIENT_ID=your-google-client-id-here
      - GOOGLE_CLIENT_SECRET=your-google-client-secret-here
      - FACEBOOK_APP_ID=your-facebook-app-id-here
      - FACEBOOK_CLIENT_SECRET=your-facebook-client-secret-here
      - OAUTH_REDIRECT_URI=http://localhost:12000/api/auth/callback
    depends_on:
      - redis
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  content-service:
    image: nginx:alpine
    container_name: content-service
    ports:
      - "3002:80"
    volumes:
      - ./api-gateway/examples/content-service:/usr/share/nginx/html:ro
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  payment-service:
    image: nginx:alpine
    container_name: payment-service
    ports:
      - "3003:80"
    volumes:
      - ./api-gateway/examples/payment-service:/usr/share/nginx/html:ro
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  admin-service:
    image: nginx:alpine
    container_name: admin-service
    ports:
      - "3004:80"
    volumes:
      - ./api-gateway/examples/admin-service:/usr/share/nginx/html:ro
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  botpress:
    image: botpress/server:latest
    container_name: botpress
    ports:
      - "3005:3000"
    environment:
      - BP_HOST=0.0.0.0
      - BP_PORT=3000
      - BP_PRODUCTION=true
      - BP_MODULE_NLU_DUCKLINGURL=http://duckling:8000
    volumes:
      - botpress-data:/botpress/data
      - ./botpress/config:/botpress/config:ro
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-policy-service:
    image: nginx:alpine
    container_name: agent-policy-service
    ports:
      - "3006:80"
    volumes:
      - ./api-gateway/examples/agent-policy-service:/usr/share/nginx/html:ro
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-management-service:
    image: nginx:alpine
    container_name: agent-management-service
    ports:
      - "3007:80"
    volumes:
      - ./api-gateway/examples/agent-management-service:/usr/share/nginx/html:ro
    networks:
      - khuongcuoicung-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: api-gateway-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./api-gateway/config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    depends_on:
      - kong-gateway
    networks:
      - khuongcuoicung-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: api-gateway-grafana
    ports:
      - "12001:3000"  # Changed from 3000 to 12001 to avoid conflict with nextjs-app
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./api-gateway/config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./api-gateway/config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - khuongcuoicung-network
    restart: unless-stopped

  # Optional: Add nginx reverse proxy for production
  # nginx:
  #   image: nginx:alpine
  #   container_name: khuongcuoicung-nginx
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - nextjs-app
  #     - api-gateway
  #   networks:
  #     - khuongcuoicung-network
  #   restart: unless-stopped

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  botpress-data:
    driver: local
  kong-db-data:
    driver: local
  kong-tmp:
    driver: local

networks:
  khuongcuoicung-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16